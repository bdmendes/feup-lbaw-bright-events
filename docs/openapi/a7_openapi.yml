openapi: '3.0.2'

info:
  title: Bright Events
  version: '1.0'

servers:
  - url: http://lbaw2134.lbaw.fe.up.pt

tags:
  - name: 'M01: Authentication'
  - name: 'M02: Users and Personal Profiles'
  - name: 'M03: Events and Event Content'
  - name: 'M04: Static Pages'
  - name: 'M05: Administration Management'

# Permissions
# NAU - Non-authenticated User
# AU - Authenticated User
# AUO - User that organizes an event
# ADM - System administrator

security:
  - cookieAuth: []

paths:

  ### Static pages ###
  /:
    get:
      operationId: R401
      summary: 'R401: Home page'
      description: 'Provide home page. Accessible by NAU, AU, AUO, ADM'
      tags:
        - 'M04: Static Pages'
      responses:
        '200':
          description: 'OK. Show home page (UI01)'
  
  /privacy-policy:
    get:
      operationId: R402
      summary: 'R402: Privacy Policy page'
      description: 'Provide privacy policy page. Accessible by NAU, AU, AUO, ADM'
      tags:
        - 'M04: Static Pages'
      responses:
        '200':
          description: 'OK. Show privacy policy page (UI02)'

  /terms-and-conditions:
    get:
      operationId: R403
      summary: 'R403: Terms and Conditions page'
      description: 'Provide terms and conditions page. Accessible by NAU, AU, AUO, ADM'
      tags:
        - 'M04: Static Pages'
      responses:
        '200':
          description: 'OK. Show terms and conditions page (UI03)'

  /faq:
    get:
      operationId: R404
      summary: 'R404: FAQ page'
      description: 'Provide frequently asked questions page. Accessible by NAU, AU, AUO, ADM'
      tags:
        - 'M04: Static Pages'
      responses:
        '200':
          description: 'OK. Show FAQ page (UI04)'

  /about:
    get:
      operationId: R405
      summary: 'R405: About page'
      description: 'Provide about page. Accessible by NAU, AU, AUO, ADM'
      tags:
        - 'M04: Static Pages'
      responses:
        '200':
          description: 'OK. Show about page (UI05)'

  /contact-us:
    get:
      operationId: R406
      summary: 'R406: Contact Us page'
      description: 'Provide contact us page. Accessible by NAU, AU, AUO, ADM'
      tags:
        - 'M04: Static Pages'
      responses:
        '200':
          description: 'OK. Show contact us page (UI06)'

  ### Users ###
  /users:
    get:
      operationId: R201
      summary: "R201: Browse Users page"
      tags:
        - 'M02: Users and Personal Profiles'
      responses:
        '200':
          description: 'OK. Show Browse/Search Users UI (UI10)'
      parameters:
        - in: query
          name: global
          schema:
            type: string
          description: "Full text search keyword"
        - in: query
          name: sort_by
          schema:
            type: string
            enum: ['name','username']
            default: 'username'
          description: "Defines the value by which the users should be ordered"
        - in: query
          name: order
          schema:
            type: string
            enum: ['ascending', 'descending']
            default: 'ascending'
          description: "Defines if it's ascending order or descending order"
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: "Starting index of user list"
        - in: query
          name: size
          schema:
            type: integer
          description: "Size of sublist to show"

  /users/{id}:
    get:
      operationId: R202
      summary: 'R202: User Profile page'
      description: 'Show user profile page. Access: NAU'
      tags:
        - 'M02: Users and Personal Profiles'
      responses:
        '200':
          description: 'Ok. Show User Profile UI (UI11)'
        '404':
          description: 'User not found'

  /users/{id}/edit:
    get:
      operationId: R204
      summary: 'R204: Edit User Profile page'
      description: 'Provide edit user profile form. Access: AU'
      tags:
        - 'M02: Users and Personal Profiles'
      responses: 
        '200':
          description: 'Ok. Show Edit User Profile UI'
        '404':
          description: 'User not found'
        '401':
          description: 'Unauthorized. User must be logged in'
    post:
      operationId: R205
      summary: 'R205: Edit User Profile Action'
      description: 'Process the new user profile information. Access: AU'
      tags:
        - 'M02: Users and Personal Profiles'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
                name:
                  type: string
                email:
                  type: string
                  format: email
                birth_date:
                  type: string
                  format: date
                bio:
                  type: string
                picture:
                  type: string
                  format: binary
                gender:
                  type: string
                  enum: ['Male, Female, Other']
      responses: 
        '200':
          description: 'Ok. Show Edit User Profile UI (UI22)'
        '404':
          description: 'User not found'
        '401':
          description: 'Unauthorized. User must be logged in'
        '500':
          description: 'Internal server error. Invalid data'

  /api/users:
    get:
      operationId: R206
      summary: "R206: Users List"
      description: "Retrieve users from database. Access: NAU"
      tags:
        - 'M02: Users and Personal Profiles'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    username:
                      type: string
                    password:
                      type: string
                      format: password
                    name:
                      type: string
                    email:
                      type: string
                      format: email
                    birth_date:
                      type: string
                      format: date
                    bio:
                      type: string
                    picture:
                      type: string
                      format: binary
                    gender:
                      type: string
                      enum: ['Male, Female, Other']
      parameters:
        - in: query
          name: global
          schema:
            type: string
          description: "Full text search keyword"
        - in: query
          name: sort_by
          schema:
            type: string
            enum: ['name','username']
            default: 'username'
          description: "Defines the value of which the users should be ordered"
        - in : query
          name: order
          schema:
            type: string
            enum: ['ascending', 'descending']
            default: 'ascending'
          description: "Defines if it's ascending order or descending order"
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: "Starting index of user list"
        - in: query
          name: size
          schema:
            type: integer
          description: "Size of sublist to show"
    post:
      operationId: R209
      summary: 'R209: Create User'
      description: 'Process the new user profile information. Access: AU'
      tags:
        - 'M02: Users and Personal Profiles'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password, name, email, gender]
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
                name:
                  type: string
                email:
                  type: string
                  format: email
                birth_date:
                  type: string
                  format: date
                bio:
                  type: string
                picture:
                  type: string
                  format: binary
                gender:
                  type: string
                  enum: ['Male, Female, Other']
      responses:
        '200':
          description: 'Ok. User created.'
        '404':
          description: 'User not found'
        '500':
          description: 'Internal server error. Invalid data'

  /api/users/{id}:
    delete:
      operationId: R208
      summary: "R208: Delete User"
      description: "Delete user from database. Access: ADM"
      tags:
        - 'M02: Users and Personal Profiles'
      responses:
        '200':
          description: 'OK. Deletion successful'
        '401':
          description: 'Unauthorized. Not enough permissions'
        '404':
          description: 'User not found'
    put:
      operationId: R209
      summary: 'R209: Edit User'
      description: 'Process the new user profile information. Access: AU'
      tags:
        - 'M02: Users and Personal Profiles'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password, name, email, gender]
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
                name:
                  type: string
                email:
                  type: string
                  format: email
                birth_date:
                  type: string
                  format: date
                bio:
                  type: string
                picture:
                  type: string
                  format: binary
                gender:
                  type: string
                  enum: ['Male, Female, Other']
                disabled:
                  type: boolean
                  default: false
                blocked:
                  type: boolean
                  default: false
      responses:
        '200':
          description: 'Ok. User information edited.'
        '404':
          description: 'User not found'
        '401':
          description: 'Unauthorized. User must be logged in'
        '500':
          description: 'Internal server error. Invalid data'

  ### Auth ###
  /login:
    get:
      operationId: R101
      summary: 'R101: Login page'
      description: 'Provide login form. Access: NAU'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'OK. Show login form (UI09)'
    post:
      operationId: R102
      summary: 'R102: Login Action'
      description: 'Process the login form. Access: NAU'
      tags:
        - 'M01: Authentication'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        '302':
          description: 'Post credentials processing redirect'
          headers:
            Location:
              description: 'Redirect path'
              schema:
                type: string
              examples:
                302Success:
                  description: 'Authentication succeeded. Redirecting to user profile (UI19)'
                  value: '/users/{id}'
                302Failure:
                  description: 'Authentication failed. Redirect to login form (UI09)'
                  value: '/login'
            Set-Cookie:
              description: 'Login session cookie'
              schema:
                type: string
              examples:
                302Success:
                  description:  'Current user login session JSESSIONID'
                  value: JSESSIONID=cookie; Path=/; HttpOnly
                302Failure:
                  description: 'Invalid login session'
                  value: ''

  /logout:
    post:
      operationId: R103
      summary: 'R103: Logout Action'
      description: 'Logout the currently authenticated user. Access: AU, ADM'
      tags:
        - 'M01: Authentication'
      security:
        - cookieAuth: []
      responses:
        '302':
          description: 'Success: Post logout redirect'
          headers:
            Location:
              description: 'Redirect path'
              schema:
                type: string
              examples:
                302Success:
                  description: 'Logout succeeded. Redirecting to home page (UI01)'
                  value: '/'
        '401':
          description: 'Unauthorized. User is not logged in'
          headers:
            Location:
              description: 'Redirect path'
              schema:
                type: string
              examples:
                302Success:
                  description: 'Logout failed. Redirecting to home page (UI01)'
                  value: '/'

  /register:
    get:
      operationId: R104
      summary: 'R104: Register page'
      description: 'Provide Register form. Access: NAU'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'OK. Show register form (UI08)'
    post:
      operationId: R105
      summary: 'R105: Register Action'
      description: 'Process the Register form. Access: NAU'
      tags:
        - 'M01: Authentication'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password, name, email, gender]
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
                name:
                  type: string
                email:
                  type: string
                  format: email
                birth_date:
                  type: string
                  format: date
                bio:
                  type: string
                picture:
                  type: string
                  format: binary
                gender:
                  type: string
                  enum: ['Male, Female, Other']
      responses:
        '302':
          description: 'Post credentials processing redirect'
          headers:
            Location:
              description: 'Redirect path'
              schema:
                type: string
              examples:
                302Success:
                  description: 'Authentication succeeded. Redirect to user profile (UI19)'
                  value: '/users/{id}'
                302Failure:
                  description: 'Authentication failed. Redirect to register form (UI08)'
                  value: '/register'
            Set-Cookie:
              description: 'Login session cookie'
              schema:
                type: string
              examples:
                302Success:
                  description:  'Current user login session JSESSIONID'
                  value: JSESSIONID=cookie; Path=/; HttpOnly
                302Failure:
                  description: 'Invalid login session'
                  value: ''

  /recover:
    get:
      operationId: R106
      summary: 'R106: Recover Password Form (UI23)'
      description: 'Provide Recover Password form. Access: NAU'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'OK. Show recover password form'
    post:
      operationId: R107
      summary: 'R107: Register Action'
      description: 'Process the Recover Password form. Accessible by NAU'
      tags:
        - 'M01: Authentication'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
              required:
                - username
                - email
      responses:
        '302':
          description: 'Success: Post recover credentials processing redirect'
          headers:
            Location:
              description: 'Redirect path'
              schema:
                type: string
              examples:
                302Success:
                  description: 'Recover succeeded. Redirect to home page (UI01)'
                  value: '/'
                302Failure:
                  description: 'Recover failed. Redirect to login form (UI09)'
                  value: '/login'

  ### Events ###
  /events/create:
    post:
      operationId: R301
      summary: 'R301: Create event page (UI17)'
      description: 'Create event: Access: AU'
      tags:
        - 'M03: Events and Event Content'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                private:
                  type: boolean
                  default: false
                date:
                  type: string
                organizer:
                  type: integer
                cover_image:
                  type: string
                  format: binary
              required: [title, description, date, organizer, cover-image]
      responses:
        '401':
          description: "Event creation requires authentication"
        '200':
          description: "Ok. show event creation page (UI17)"
              
  /events/{id}:
    get:
      operationId: R302
      summary: "R302: Event details page (UI18)"
      tags:
        - 'M03: Events and Event Content'
      responses:
        '404':
          description: 'Event not found'
        '403':
          description: "User doesn't have permission to view event"
        '401':
          description: "Event requires authentication to be viewed"
        '200':
          description: "OK. Show event's details"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    title:
                      type: string
                    description:
                      type: string
                    date:
                      type: string
                      format: date-time
                    private:
                      type: string
                    disabled:
                      type: string
                    event_state:
                      type: string
                      enum: 
                      [
                        "cancelled",
                        "finished",
                        "on-going",
                        "due"
                      ]
                    cover_image: 
                      type: integer
                    organizer:
                      type: integer
                    location:
                      type: integer

  /events/{id}/edit:
    get:
      operationId: R303
      summary: "R303: Edit event page (UI18)"
      tags:
        - "M03: Events and Event-related Content"
      responses:
        '404' : 
          description: "Event not found"
        '200':
          description: "Ok. Show event edition"        
    post:
      operationId: R304
      summary: 'R304: Update event'
      description: 'Update event: Access: AUO'
      tags:
        - 'M03: Events and Event Content'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                private:
                  type: boolean
                  default: false
                cover_image:
                  type: string
                  format: binary
              required: [title, description]
      responses:
        '200':
          description: 'Ok. Event updated.'
        '401':
          description: "Unauthorized. User must be the event's organizer"
        '500':
          description: 'Internal server error. Invalid data'

  /api/events:
    get:
      operationId: R305
      summary: "R305: Event list (UI12)"
      description: "Browse events page. Access: NAU"
      tags:
        - 'M03: Events and Event Content'
      responses:
        '200':
          description: 'OK, Show list of events'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    title:
                      type: string
                    description:
                      type: string
                    date:
                      type: string
                      format: date-time
                    private:
                      type: string
                    disabled:
                      type: string
                    state:
                      type: string
                      enum: 
                      [
                        "cancelled",
                        "finished",
                        "on-going",
                        "due"
                      ]
                    cover_image: 
                      type: integer
                    organizer:
                      type: integer
                    location:
                      type: integer
      parameters:
        - in: query
          name: sort_by
          schema:
            type: string
            enum: ['date', 'attendees']
          description: "Defines the value by which the events should be ordered"
        - in : query
          name: order
          schema:
            type: string
            enum: ['ascending', 'descending']
          description: "Defines if it's ascending order or descending order"
        - in: query
          name: global
          schema:
            type: string 
          description: "Filters events via title and description"
        - in: query
          name: location
          schema:
            type: string
          description: "Filters events via location"
        - in: query
          name: organizer
          schema:
            type: integer
          description: "Filters events via it's organizer"
        - in: query
          name: tag
          schema:
            type: string
          description: "Filters events via tag"
        - in: query
          name: begin_date
          schema:
            type: string
            format: date
          description: "Show events that start after 'begin_date'"
        - in: query
          name: end_date
          schema:
            type: string
            format: date
          description: "Show events that started before 'end_date'"
    post:
      operationId: R306
      summary: 'R306: Create event'
      description: 'Create event. Access: AUO'
      tags:
        - 'M03: Events and Event Content'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: integer
                private:
                  type: boolean
                  default: false
                organizer:
                  type: integer
                cover_image:
                  type: string
                  format: binary
              required: [title, description, private, organizer]
      responses:
        '200':
          description: 'Ok. Event update.'
        '401':
          description: "Unauthorized. User must be the event's organizer"
        '500':
          description: 'Internal server error. Invalid data' 

  /api/events/{id}:
    put:
      operationId: R307
      summary: 'R307: Update event'
      description: 'Update event: Access: AUO'
      tags:
        - 'M03: Events and Event Content'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: integer
                isprivate:
                  type: boolean
                  default: false
                organizer:
                  type: integer
              required: [title, description, isprivate, organizer]
      responses:
        '200':
          description: 'Ok. Event update.'
        '401':
          description: "Unauthorized. User must be the event's organizer"
        '500':
          description: 'Internal server error. Invalid data' 

  /api/events/attendees:
    get: 
      operationId: "R306"
      summary: "R306: Get event's attendees"
      tags:
        - 'M03: Events and Event Content'
      
      parameters:
        - in: query
          name: eventId
          schema:
            type: integer
          description: "Event's id"
        - in: query
          name: offset
          schema:
            type: integer
          description: "Offset of attendees"
        - in: query
          name: size
          schema:
            type: integer
          description: "Determines the number of attendees given"
      responses:
        '404':
          description: "Event not found"
        '200':
          description: "OK, show event's attendees "
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    user_picture:
                      type: integer


  /api/events/comments/{eventId}:
    get: 
      operationId: "R305"
      summary: "Get event's comments"
      tags:
        - 'M03: Events and Event Content'
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: "Offset of comments"
        - in: query
          name: size
          schema:
            type: integer
          description: "Determines the number of comments given"

      responses:
        '404':
          description: "Event not found"
        '200':
          description: "OK, show event's comments "
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    author:
                      type: integer
                    author_picture:
                      type: integer
                    body:
                      type: string
    
    put:
      operationId: R310
      summary: 'R310: Create comment'
      description: 'Create comment: Access: AU AUO '
      tags:
        - 'M03: Events and Event Content'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                user:
                  type: integer
                event:
                  type: integer
                author:
                  type: integer
              required: [body, user, event, author]
      responses:
        '200':
          description: 'Ok. Comment created.'
        '401':
          description: 'Unauthorized. User must be an attendee or organizer'
        '500':
          description: 'Internal server error. Invalid data'
    
    delete:
      operationId: R307
      summary: "307: Delete Comment"
      description: "Delete Comment from database. Access: AUO or author"
      tags:
        - 'M03: Events and Event Content'
      responses:
        '200':
          description: 'OK. Deletion successful'
        '401':
          description: 'Unauthorized. Not enough permissions'
        '404':
          description: 'Comment not found'

  /api/events/invites/{eventId}:
    get: 
      operationId: "R307"
      summary: "R307: Get event's pending invites"
      tags:
        - 'M03: Events and Event Content'
      
      parameters:
        - in: query
          name: eventId
          schema:
            type: integer
          description: "Event's id"
        - in: query
          name: offset
          schema:
            type: integer
          description: "Offset of invites"
        - in: query
          name: size
          schema:
            type: integer
          description: "Determines the number of invites given"
      responses:
        '403':
          description: "User doesn't have permission to view event's invites"
        '402':
          description: "Requires authentication to view event's invites"
        '404':
          description: "Event not found"
        '200':
          description: "OK, show event's invites "
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    attendee_id:
                      type: integer
                    event_id:
                      type: integer
    put:
      operationId: R308
      summary: "R308: Submit an invite"
      tags:
        - 'M03: Events and Event Content'
      requestBody:
        description: 'Invite information'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event_id:
                  type: integer
                attendee_id: 
                  type: integer
              required: [event_id, attendee_id]
      responses:
        '200':
          description: 'Ok. Invite created.'
        '401':
          description: 'Unauthorized. User must be an organizer'
        '500':
          description: 'Internal server error. Invalid data'
    delete:
      operationId: R307
      summary: "307: Delete Invite"
      description: "Delete Invite from database. Access: AUO"
      tags:
        - 'M03: Events and Event Content'
      responses:
        '200':
          description: 'OK. Deletion successful'
        '401':
          description: 'Unauthorized. Not enough permissions'
        '404':
          description: 'Invite not found'


  /api/events/join_requests/{eventId}:
    get: 
      operationId: "R307"
      summary: "R307: Get event's pending join requests"
      tags:
        - 'M03: Events and Event Content'
      
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: "Offset of join requests"
        - in: query
          name: size
          schema:
            type: integer
          description: "Determines the number of join requests given"
      responses:
        '403':
          description: "User doesn't have permission to view event's join requests"
        '402':
          description: "Requires authentication to view event's join requests"
        '404':
          description: "Event not found"
        '200':
          description: "OK, show event's join requests "
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    attendee_id:
                      type: integer
                    event_id:
                      type: integer
    
    put:
      operationId: R308
      summary: "R308: Submit a join request"
      tags:
        - 'M03: Events and Event Content'
      requestBody:
        description: 'Join request information'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event_id:
                  type: integer
                attendee_id: 
                  type: integer
              required: [event_id, attendee_id]
      responses:
        '200':
          description: 'OK. Deletion successful'
        '401':
          description: 'Unauthorized. Not enough permissions'
        '404':
          description: 'Join request not found'
    delete:
      operationId: R307
      summary: "307: Delete Join request"
      description: "Delete Join request from database. Access: Join request'a attendee (AU)"
      tags:
        - 'M03: Events and Event Content'
      responses:
        '200':
          description: 'OK. Deletion successful'
        '401':
          description: 'Unauthorized. Not enough permissions'
        '404':
          description: 'Join request not found'
